#!/usr/bin/env python
import sys
import os
from os import path

DOMAIN=sys.argv[1]
USERKEY="keys/user.key"
WITH_WWW = False

KEY_PATH="keys/"
DOMAIN_PATH=KEY_PATH+DOMAIN+'/'
CHALLENGE_PATH="challenges/" + DOMAIN + "/"
INTERMEDIATE_KEY=KEY_PATH+"intermediate.pem"

if not DOMAIN:
	print "Invalid domain"
	sys.exit(1)

print "Domain: %s" % DOMAIN

#while raw_input("Proceed? [y/n]: ") != 'y': pass

#Helpers
def sh(cmd): os.system(cmd)

#Update acme
print "Updating ACME client..."
sh('wget -O - "https://github.com/diafygi/acme-tiny/raw/master/acme_tiny.py" > acme_tiny.py')

#Fetch intermediate
print "Updating intermediate certificate..."
sh('wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > %s' % INTERMEDIATE_KEY)

if not path.isdir(DOMAIN_PATH):
	print "Directory not found, creating..."
	os.mkdir(DOMAIN_PATH)

if not path.isdir(CHALLENGE_PATH):
	print "Creating challenge dir..."
	os.mkdir(CHALLENGE_PATH)

# Check for user key
if not path.isfile(USERKEY):
	print "No user key found, creating %s..." % USERKEY
	sh("openssl genrsa 4096 > %s" % USERKEY)

# Build CSR

_baseName = "%s/%s" % (DOMAIN_PATH, DOMAIN)
KEY=_baseName + ".key"
CSR=_baseName + ".csr"
CRT=_baseName + ".crt"

if not path.isfile(KEY):
	print "Generating private key..."
	sh("openssl genrsa 4096 > %s" % KEY)
else: print "  Existing private key found"

if not path.isfile(CSR):
	print "Generating certificate signing request (csr)..."
	if WITH_WWW:
		print "  Set www=true"
		sh('openssl req -new -sha256 -key %s -subj "/" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf "[SAN]\nsubjectAltName=DNS:%s,DNS:www.%s")) > %s' % (KEY, DOMAIN, DOMAIN, CSR))
	else:
		sh('openssl req -new -sha256 -key %s -subj "/CN=%s" > %s' % (KEY, DOMAIN, CSR))
else: print "  Existing CSR found."


# Create certificate
sh('./acme_tiny.py --account-key %s --csr %s --acme-dir %s > %s' % (USERKEY, CSR, CHALLENGE_PATH, CRT))

# Concat and output certs to /etc/certs
OUT = "/etc/certs/" + DOMAIN + ".pem"

print "Writing full key to %s..." % OUT
FULL_KEY = open(KEY).read() + open(CRT).read() + open(INTERMEDIATE_KEY).read()
open(OUT, 'w').write(FULL_KEY)

